// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addProduct = `-- name: AddProduct :one
INSERT INTO products (id, product_name, description, brand, product_code, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, product_name, description, brand, product_code, created_at, updated_at
`

type AddProductParams struct {
	ID          uuid.UUID
	ProductName string
	Description sql.NullString
	Brand       sql.NullString
	ProductCode string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProduct,
		arg.ID,
		arg.ProductName,
		arg.Description,
		arg.Brand,
		arg.ProductCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Description,
		&i.Brand,
		&i.ProductCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductByID = `-- name: DeleteProductByID :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProductByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductByID, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, product_name, description, brand, product_code, created_at, updated_at
FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Brand,
			&i.ProductCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByProductCode = `-- name: GetProductByProductCode :one
SELECT id, product_name, description, brand, product_code, created_at, updated_at
FROM products
WHERE product_code = $1
`

func (q *Queries) GetProductByProductCode(ctx context.Context, productCode string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByProductCode, productCode)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Description,
		&i.Brand,
		&i.ProductCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

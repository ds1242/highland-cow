// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product_scanned.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addProductScan = `-- name: AddProductScan :one
INSERT INTO product_scanned (id, product_id, user_id, quantity)
VALUES ($1, $2, $3, $4)
RETURNING id, product_id, user_id, quantity
`

type AddProductScanParams struct {
	ID        uuid.UUID
	ProductID uuid.UUID
	UserID    uuid.UUID
	Quantity  int32
}

func (q *Queries) AddProductScan(ctx context.Context, arg AddProductScanParams) (ProductScanned, error) {
	row := q.db.QueryRowContext(ctx, addProductScan,
		arg.ID,
		arg.ProductID,
		arg.UserID,
		arg.Quantity,
	)
	var i ProductScanned
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Quantity,
	)
	return i, err
}

const getUserList = `-- name: GetUserList :many
SELECT product_scanned.id, product_id, user_id, quantity, products.id, product_name, description, brand, product_code, created_at, updated_at
FROM product_scanned
RIGHT JOIN products ON product_scanned.product_id = product.id
`

type GetUserListRow struct {
	ID          uuid.NullUUID
	ProductID   uuid.NullUUID
	UserID      uuid.NullUUID
	Quantity    sql.NullInt32
	ID_2        uuid.UUID
	ProductName string
	Description sql.NullString
	Brand       sql.NullString
	ProductCode string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUserList(ctx context.Context) ([]GetUserListRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserListRow
	for rows.Next() {
		var i GetUserListRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.Quantity,
			&i.ID_2,
			&i.ProductName,
			&i.Description,
			&i.Brand,
			&i.ProductCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

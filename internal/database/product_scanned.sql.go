// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product_scanned.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addProductScan = `-- name: AddProductScan :one
INSERT INTO product_scanned (id, product_id, user_id, quantity)
VALUES ($1, $2, $3, $4)
RETURNING id, product_id, user_id, quantity
`

type AddProductScanParams struct {
	ID        uuid.UUID
	ProductID uuid.UUID
	UserID    uuid.UUID
	Quantity  int32
}

func (q *Queries) AddProductScan(ctx context.Context, arg AddProductScanParams) (ProductScanned, error) {
	row := q.db.QueryRowContext(ctx, addProductScan,
		arg.ID,
		arg.ProductID,
		arg.UserID,
		arg.Quantity,
	)
	var i ProductScanned
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Quantity,
	)
	return i, err
}

const getScanById = `-- name: GetScanById :one
SELECT id, product_id, user_id, quantity
FROM product_scanned
WHERE id = $1
`

func (q *Queries) GetScanById(ctx context.Context, id uuid.UUID) (ProductScanned, error) {
	row := q.db.QueryRowContext(ctx, getScanById, id)
	var i ProductScanned
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Quantity,
	)
	return i, err
}

const getScanByUserAndProductID = `-- name: GetScanByUserAndProductID :one
SELECT id, product_id, user_id, quantity
FROM product_scanned
WHERE user_id = $1
AND product_id = $2
`

type GetScanByUserAndProductIDParams struct {
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) GetScanByUserAndProductID(ctx context.Context, arg GetScanByUserAndProductIDParams) (ProductScanned, error) {
	row := q.db.QueryRowContext(ctx, getScanByUserAndProductID, arg.UserID, arg.ProductID)
	var i ProductScanned
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Quantity,
	)
	return i, err
}

const getUserList = `-- name: GetUserList :many
SELECT product_scanned.id, product_id, user_id, quantity, products.id, product_name, description, brand, product_code, created_at, updated_at
FROM product_scanned
JOIN products
ON product_scanned.product_id = products.id
WHERE product_scanned.user_id = $1
`

type GetUserListRow struct {
	ID          uuid.UUID
	ProductID   uuid.UUID
	UserID      uuid.UUID
	Quantity    int32
	ID_2        uuid.UUID
	ProductName string
	Description sql.NullString
	Brand       sql.NullString
	ProductCode string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUserList(ctx context.Context, userID uuid.UUID) ([]GetUserListRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserListRow
	for rows.Next() {
		var i GetUserListRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.Quantity,
			&i.ID_2,
			&i.ProductName,
			&i.Description,
			&i.Brand,
			&i.ProductCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScanQuantity = `-- name: UpdateScanQuantity :one
UPDATE product_scanned
SET quantity = $1
WHERE id = $2
RETURNING id, product_id, user_id, quantity
`

type UpdateScanQuantityParams struct {
	Quantity int32
	ID       uuid.UUID
}

func (q *Queries) UpdateScanQuantity(ctx context.Context, arg UpdateScanQuantityParams) (ProductScanned, error) {
	row := q.db.QueryRowContext(ctx, updateScanQuantity, arg.Quantity, arg.ID)
	var i ProductScanned
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Quantity,
	)
	return i, err
}
